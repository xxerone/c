/*
8.P 393-394 메시지 암호화 구현 및 결과확인

암호화된 문자열을 복원하는 함수 decrypt()를 작성하고 테스트해줘
decrypt()는 다음과 같은 원형을 가져
void decrypt(char cipher[], int shift);
*/

#include <stdio.h>
#include <string.h>

// 함수 원형 선언
void encrypt(char cipher[], int shift);
void decrypt(char cipher[], int shift);

int main() {
    char cipher[50];  // 입력할 문자열
    int shift = 3;    // 암호화에 사용할 쉬프트 값

    // 문자열 입력
    printf("문자열을 입력하시오: ");
    fgets(cipher, sizeof(cipher), stdin);
    cipher[strcspn(cipher, "\n")] = '\0';  // fgets로 입력받은 문자열의 줄바꿈 제거

    // 암호화
    printf("\n[암호화 전] %s\n", cipher);
    encrypt(cipher, shift);
    printf("[암호화 후] %s\n", cipher);

    // 복호화
    decrypt(cipher, shift);
    printf("[복호화 후] %s\n", cipher);

    return 0;
}

// 암호화 함수
void encrypt(char cipher[], int shift) {
    int i = 0;

    while (cipher[i] != '\0') {
        // 소문자 처리
        if (cipher[i] >= 'a' && cipher[i] <= 'z') {
            cipher[i] += shift;
            if (cipher[i] > 'z') {
                cipher[i] -= 26;  // 'z'를 넘어가면 다시 'a'부터
            }
        }
        // 대문자 처리
        else if (cipher[i] >= 'A' && cipher[i] <= 'Z') {
            cipher[i] += shift;
            if (cipher[i] > 'Z') {
                cipher[i] -= 26;  // 'Z'를 넘어가면 다시 'A'부터
            }
        }
        i++;
    }
}

// 복호화 함수
void decrypt(char cipher[], int shift) {
    int i = 0;

    while (cipher[i] != '\0') {
        // 소문자 처리
        if (cipher[i] >= 'a' && cipher[i] <= 'z') {
            cipher[i] -= shift;
            if (cipher[i] < 'a') {
                cipher[i] += 26;  // 'a'를 넘어가면 다시 'z'부터
            }
        }
        // 대문자 처리
        else if (cipher[i] >= 'A' && cipher[i] <= 'Z') {
            cipher[i] -= shift;
            if (cipher[i] < 'A') {
                cipher[i] += 26;  // 'A'를 넘어가면 다시 'Z'부터
            }
            /*
            예제 2: 문자 'd'를 복호화
            입력:
            문자: 'd'.
            shift = 5.
            복호화:
            cipher[i] -= shift;:

            'd'의 ASCII 값: 100.
            100 - 5 = 95.
            결과: 95 → '_'(알파벳 범위 밖).
            if (cipher[i] < 'a') 조건 만족:

            95 < 97 → 참.
            cipher[i] += 26;:

            95 + 26 = 121.
            결과: 121 → 'y'.
            최종 결과:
            복호화된 문자: 'y'.
            */
        }
        i++;
    }
}

/*
#include <stdio.h>

void encrypt(char cipher[], int shift);

int main()
{
    char cipher[50];
    int shift = 3;

    printf("문자열을 입력하시오:");
    gets_s(cipher, sizeof(cipher));
    encrypt(cipher, shift);

    return 0;
}

void encrypt(char cipher[], int shift) {
    int i = 0;

    while (cipher[i] != '\0') {
        if (cipher[i] >= 'a' && cipher[i] <= 'a') {
            cipher[i] += shift;
            if (cipher[i] > 'z') {
                cipher[i] -= 26;
                // 경계를 넘어갔으면 26을 빼서 앞으로 간다는게 어떻게 넘어가나 예시
            }
            i++;
        }
    }
}
*/
