/*
360 - 361

*/
#include <stdio.h>
#define SIZE 5

void print_image(const int image[SIZE][SIZE]) {
    // 값 변경 안되려고 const 쓴 듯
    int r, c;
    for (r = 0; r < SIZE; r++) {
        for (c = 0; c < SIZE; c++) {
            printf("%03d ", image[r][c]);
            // %03d가 뭐지
            /*
            *%03d**는 출력 형식을 지정하는 포맷 문자열입니다:

            %d: 정수를 출력합니다.
            03: 최소 3자리로 출력하며, 자릿수가 모자랄 경우 0으로 채웁니다.

            예:
            값이 5라면 출력은 005.
            값이 123이라면 출력은 그대로 123.
            */
        }
        printf("\n");
    }
    printf("\n");
}

void brighten_image(int image[SIZE][SIZE]) {
    // 그런데 여기는 왜 그냥 int지?

    /*
    1. const 사용 이유
    const int image[SIZE][SIZE]:

    print_image 함수에서는 이미지를 출력하기만 하고, 값을 변경하지 않기 때문에 const를 사용합니다.
    const 키워드는 함수 내부에서 배열을 수정하지 못하도록 합니다.
    이렇게 하면 실수로 값을 변경하는 일이 없도록 컴파일러가 보장해줍니다.
    반면, brighten_image 함수에서는 이미지를 수정해야 하므로 const를 사용하지 않습니다.

    즉, brighten_image에서는 배열 요소의 값을 실제로 변경해야 하기 때문에 그냥 int image[SIZE][SIZE]로 선언됩니다.
    */
    int r, c;
    int* p;
    p = &image[0][0];
    // 이미 2차원 배열이라 주소를 가리키고 있는거 아닌가? 왜 주소 기호를 쓰는거지?
    /*
    image 자체는 2차원 배열의 주소를 나타냅니다.
    하지만 image[0][0]은 배열의 첫 번째 요소(정수 값)를 가리킵니다.

    만약에 p = image[0][0]; 이거만 썻을 때는 아무리 배열이라해도 그냥 첫번째 값만 가리키기 때문에 포인터가 아니라는거야?
    -> 맞다
    [설명]
    여기서 **image[0][0]**은 2차원 배열의 첫 번째 요소의 값을 의미합니다.
    만약 이 값을 p에 대입하면, **p는 첫 번째 값(정수)**를 저장하는 일반 변수로 동작합니다.
    즉, 이 경우 p는 포인터가 아닙니다. 그냥 정수 값을 저장하는 변수로 간주됩니다.

    &image[0][0]:
    이는 배열의 첫 번째 요소의 주소를 명시적으로 가져오는 표현입니다.
    결과적으로 p는 배열의 첫 번째 요소를 가리키는 포인터가 됩니다.
    이렇게 하면 2차원 배열을 포인터로 순회할 수 있게 됩니다.
    */
    for (r = 0; r < SIZE; r++) {
        for (c = 0; c < SIZE; c++) {
            *p += 10; // ㄱ해당하는 값을 10 증가시키는거 같ㄷ고
            p++;
            // 이건 뭐하는거지?, 그냥 끝나면 반복을 한 번 더 하는거 아닌가? 그럼 포인터가 하나 더 증가될거 같은데
            // 일단 주석은 포인터 하나 증가시켜서 다음 픽셀을 가리키게 한다.
            /*
            image[0][0], image[0][1], image[0][2],
            image[1][0], image[1][1], image[1][2],
            image[2][0], image[2][1], image[2][2]
            포인터 p는 image[0][0]을 가리킨 상태에서 p++하면, 메모리 상에서 다음 요소로 이동합니다.
            */
        }
    }
}

int main()
{
    int image[SIZE][SIZE] = {
        {10, 20, 30, 40, 50},
        {10, 20, 30, 40, 50},
        {10, 20, 30, 40, 50},
        {10, 20, 30, 40, 50},
    };

    print_image(image);
    brighten_image(image);
    print_image(image);

    return 0;
}
